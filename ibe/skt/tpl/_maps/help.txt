  _   _ U _____ u _      ____
 |'| |'|\| ___"|/|"|   U|  _"\ u
/| |_| |\|  _|"U | | u \| |_) |/
U|  _  |u| |___ \| |/__ |  __/
 |_| |_| |_____| |_____||_|
 //   \\ <<   >> //  \\ ||>>_
(_") ("_)__) (__)_")("_)__)__)

Este repossitório é um dos mais importantes para o aplicativo. Ele pode existir
também dentro do módulo, porém, suas classes serão visíveis apenas nas lógicas
utilizadas dentro do próprio módulo. Por exemplo:
Uma classe acao que for implementada dentro da pasta _maps do módulo plano_acao
não será vista para as classes ou implementações realizadas dentro de um módulo
estoque.
Porém, se a classe acao for implementada na pasta raiz _maps ela será visível a
todos os módulos implementados, neste contexto, o módulo estoque poderia fazer
uso da classe acao.

Dentro desta pasta _maps, deve esta contido todas as classes que trabalham com o
banco de dados. Conceitualmente falando, o nome _maps refere-se as classes mapas.
As classes do tipo mapa tem a função de ser um espelho das tabelas do banco de
dados. Dessa forma ao implementar o aplicativo, as tabelas do banco de dados
seram abstraídas em objetos PHP. Abaixo segue um exemplo de tabela no banco
e uma classe mapa que reflete esta tabela:

mysql> DESC plano_acao;
+-------------+-------------+------+-----+-------------------+----------------+
| Field       | Type        | Null | Key | Default           | Extra          |
+-------------+-------------+------+-----+-------------------+----------------+
| id          | int(11)     | NO   | PRI | NULL              | auto_increment |
| nome        | varchar(80) | NO   | UNI | NULL              |                |
| descricao   | text        | NO   |     | NULL              |                |
| fun_chapa   | varchar(11) | NO   |     | NULL              |                |
| revisao     | date        | NO   |     | NULL              |                |
| dt_cadastro | timestamp   | YES  |     | CURRENT_TIMESTAMP |                |
+-------------+-------------+------+-----+-------------------+----------------+
6 rows in set (0.01 sec)

A classe para esta tabela será:

//nome do arquivo dentro de _maps:  inc_planoacao.php
<?php
class PlanoacaoMap extends Ibe_Map{

	protected function configure(){
		$this->table_name  = 'teste.pa_plano_acao';
		$this->primary_key = 'id';
		$this->columns_conf = array(
			'id'=>'int',
			'nome'=>'string',
			'descricao'=>'string',
			'fun_chapa'=>'string',
			'revisao'=>'date',
			'dt_cadastro'=>'date'
		);
	}
}
?>

Para utilizar este mapa, deve ser utilizado o criador de mapas como no exemplo
abaixo:

<?php

.....public function ... {

            // instanciando uma nova tabela do banco de dados
            $planoacao = Ibe_Map::getTable('planoacao');
.....}

?>

Uma vez que a tabela foi instanciada, alguns métodos dela podem ser utilizados
para facilitar a manipulação de dados. Todos os campos/colunas do mapa recebem
O métodos get e set. No exemplo acima poderiamos manipular o mapa da seguinte
maneira:

<?php

    ....

            // instanciando uma nova tabela do banco de dados
            $planoacao = Ibe_Map::getTable('planoacao');
            $planoacao->setNome("Implementação do processo de software");
            ....
            // imprime a string "Implementação do processo de software"
            echo $planoacao->getNome();
    ....
?>

Além destes métodos existem outros mais para auxiliar na manipulação de dados.
A seguir uma lista com o nome e documentação de alguns métodos:

    /**
     * Captura o nome da tabela representada pelo model
     * @return string
     */
    public function getTableName()

    /**
     * Captura o nome da chave primaria
     * @return string
     */
    public function getPrimaryKey()

    /**
     * Retorna o array de chaves estrangeiras conforme a configuracao do model
     * @return array
     */
    public function getForeignKey()

    /**
     * Retorna um array de colunas  conforme a configuracao do model
     * @return array
     */
    public function getColumns()

    /**
     * Retorna um array de colunas  conforme a configuracao do model
     * @return array
     */
    public function getColumnsConf()

    /**
     * Verifica se a tabela eh de muitos pra muitos conforme a configuracao do model
     * @return bool
     */
    public function isHasManyTable()

    /**
     * Verifica se a chave primaria eh verdadeira conforme a configuracao do model
     * @return bool
     */
    public function isPrimaryKeyAutoIncrement()

    /**
     * Salva o objeto
     * @return Model
     */
    public function save()

    /**
     * Deleta o objeto
     */
    public function delete()

    /**
     * Atualiza o objeto. Alias para save. O mesmo método
     * @return Model
     */
    public function update()

    /**
     * Procura por todos os modelos existentes da classe
     * @param int $start
     * @param int $limit
     * @return Model
     */
    public function findAll(array $order = array(), $start = 0, $limit = 10000)

    /**
     * Procura todos os objetos por um determinado campo
     *
     * @param string|array $field
     * @param mixed|array $value
     * @param int $start
     * @param int $limit
     * @return Ibe_Map
     */
    public function findAllBy($fields, $values, array $orders = array(), $page = 0, $size = 10000)

    /**
     * Procura o objeto por um id
     * @param mixed $id
     * @return Ibe_Map
     */
    public function findById($id)

    /**
     * Encontra o objeto por um campo baseado na configuração da classe model
     * @param string|array $field
     * @param mixed|array $value
     * @return Ibe_Map
     */
    public function findBy($fields, $values)

    /**
     * Procura por todos os modelos existentes da classe
     * @param int $start
     * @param int $limit
     * @return Model
     */
    public function findAllWithJoin($order = null, $start = null, $limit = null)

    /**
     * Procura todos os objetos por um determinado campo, realizando a juncao das chaves estrangeira
     * configuradas no mapa
     *
     * @param string $field
     * @param mixed $value
     * @param int $order
     * @param int $start
     * @param int $limit
     * @return Ibe_Map
     */
    public function findAllByWithJoin($fields, $values, $order = array(), $start = 0, $limit = 10000)

    /**
     * Busca os objetos do banco de dados, conforme o objeto
     * Ibe_Database_query montar a query a ser buscada
     *
     * @param Ibe_Database_Query $obj
     * @return array
     */
    public function findByQuery(Ibe_Database_Query $obj, $all_columns = false)

    /**
     * Para um relacionamento de um para muitos o retorno sera apenas 1 objeto
     * do tipoIbe_Map. Para relacionamendos n-n sera retornado um array
     * de objetos Ibe_Map
     *
     * @param string $class_name
     * @return Ibe_Map
     */
    public function getChild($class_name)

    /**
     * Retorna o total de registros
     *
     * @param string $where
     * @return int
     */
    public function getCount($where = '')

    /**
     * Verifica se o objeto é existe no banco de dados
     * @return boolean
     */
    public function isEmpty()

    /**
     * Retorna os valores em forma de array
     * @return array
     */
    public function toArray()

    /**
     * Verifica se uma variavel do mapa foi setada ou não esta em branco
     * @param string $name
     * @return boolean
     */
    public function isVarSet($name)

    /**
     * transforma modelos em arrays simples
     * @param array $models
     */
    static public function toArrayModels(array $models)

Abaixo um exemplo de utilização da Mapa:

<?php

.......public function ....{
            $planoacao = Ibe_Map::getTable('planoacao')->findbyId('123');
            $planoacao->setDate(date('Y-m-d'));
            $planoacao->save();
       }
.......

?>

Uma boa prática é inserir a regra de negócio dentro do mapa. Por exemplo:
- Plano de ação deve encerrar caso a data da revisão for igual a 2012-01-01

A implementação do mapa poderia ser:

//nome do arquivo dentro de _maps:  inc_planoacao.php
<?php
class PlanoacaoMap extends Ibe_Map{

	protected function configure(){ .... }

        public function encerrar(){ .... }
}
?>

A utilização seria da seguinte forma:
<?php

.......public function ....{
            $planoacao = Ibe_Map::getTable('planoacao')->findbyId('123');
            // O método encerrar é o responssável por realizar a verificação
            // da regra de negócio, ou seja, a comparação das datas...
            $planoacao->encerrar();
       }
.......

?>

